module.exports = function (names) {
  return "import React from 'react';\n"
       + "import { Component } from 'react';\n"
       + "import { bindActionCreators } from 'redux';\n"
       + "import { connect } from 'react-redux';\n"
       + "import bindHandlers from '../lib/bindhandlers';\n"
       + "\n"
       + "import " + names.component + " from '../components/" + names.component + "';\n"
       + "\n"
       + "import * as " + names.actions + " from '../actions/" + names.actions + "';\n"
       + "import * as data from '../data/" + names.data + "';\n"
       + "import * as handlers from '../handlers/" + names.handlers + "';\n"
       + "\n"
       + "class " + names.container + " extends Component {\n"
       + "  constructor() {\n"
       + "    super();\n"
       + "    this.state = {\n"
       + "      containerName: '" + names.container + "'\n"
       + "    };\n"
       + "  }\n"
       + "\n"
       + "  render() {\n"
       + "    const { actions } = this.props;\n"
       + "\n"
       + "    return (\n"
       + "      <" + names.component + "\n"
       + "        data={data}\n"
       + "        actions={actions}\n"
       + "        handlers={bindHandlers(this, handlers)}\n"
       + "      />\n"
       + "    );\n"
       + "  }\n"
       + "}\n"
       + "\n"
       + "/**\n"
       + " * Returns a collection of props on the component that\n"
       + " * corresponds to values in the redux state.\n"
       + " * { bar: state.foo.bar }"
       + " */\n"
       + "function select(state) {\n"
       + "  return {};\n"
       + "}\n"
       + "\n"
       + "/**\n"
       + " * Returns a collection of props on the component that\n"
       + " * are functions that trigger redux actions.\n"
       + " * All functions exported from the actions file are\n"
       + " * automatically bound for you here.\n"
       + " * { foo: bindActionCreators(actions.foo, dispatch) }\n"
       + " */\n"
       + "function action(dispatch) {\n"
       + "  const actionCreators = {};\n"
       + "  Object.keys(" + names.actions + ").forEach(key => {\n"
       + "    actionCreators[key] = bindActionCreators(" + names.actions + "[key], dispatch);\n"
       + "  });\n"
       + "\n"
       + "  // Bind any further actions here...\n"
       + "  // actionCreators.foo = bindActionCreators(foo, dispatch);\n"
       + "\n"
       + "  return { actions: actionCreators };\n"
       + "}\n"
       + "\n"
       + "export default connect(select, action)(" + names.container + ");\n"
       ;

}
